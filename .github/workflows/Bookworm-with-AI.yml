name: Build Bookworm with AI

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      OUTPUT_DIR: ${{ github.workspace }}/output-bookworm
      TEMP_OUTPUT_DIR: ${{ github.workspace }}/temp-output-bookworm

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y git curl xz-utils

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
          ${{ runner.os }}-

    - name: Clone Armbian build repository
      run: git clone --depth=1 --branch=main https://github.com/armbian/build

    - name: Compile Armbian image
      run: |
        cd build
        ./compile.sh BOARD=nanopi-r3s BRANCH=current RELEASE=bookworm BUILD_MINIMAL=yes BUILD_DESKTOP=no KERNEL_CONFIGURE=no

    - name: Compress compiled image
      run: |
        mkdir -p $OUTPUT_DIR
        cp -r build/output/images/* $OUTPUT_DIR/
        mkdir -p $TEMP_OUTPUT_DIR
        cp -r $OUTPUT_DIR/* $TEMP_OUTPUT_DIR/
        for img in $TEMP_OUTPUT_DIR/*.img; do
          xz -z -c "$img" > "$OUTPUT_DIR/$(basename "$img").xz"
        done

    - name: Upload compressed image
      uses: actions/upload-artifact@v4
      with:
        name: armbian-image-bookworm
        path: $OUTPUT_DIR/*.img.xz
